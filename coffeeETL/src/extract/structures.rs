pub enum num_str {
    Float(f64),
    Text(String),
}

pub struct ComputedField{
    CHARGE_ET: f64,
    CHARGE_BT: f64,
    TP_idx: f64,
    TP_time: f64,
    TP_ET: f64,
    TP_BT: f64,
    MET: f64,
    DRY_time: f64,
    DRY_ET: f64,
    DRY_BT: f64,
    FCs_time: f64,
    FCs_ET: f64,
    FCs_BT: f64,
    DROP_time: f64,
    DROP_ET: f64,
    DROP_BT: f64,
    totaltime: f64,
    dryphasetime: f64,
    midphasetime: f64,
    finishphasetime: f64,
    dry_phase_ror: f64,
    mid_phase_ror: f64,
    finish_phase_ror: f64,
    total_ror: f64,
    fcs_ror: f64,
    total_ts: i64,
    total_ts_ET: i64,
    total_ts_BT: i64,
    AUC: i64,
    AUCbegin: String,
    AUCbase: i64,
    AUCfromeventflag: i64,
    dry_phase_AUC: i64,
    mid_phase_AUC: i64,
    finish_phase_AUC: i64,
    weight_loss: i64,
    volumein: i64,
    volumeout: i64,
    weightin: i64,
    weightout: i64,
    ambient_temperature: i64,
    det: i64,
    dbt: i64,
    BTU_preheat: i64,
    CO2_preheat: i64,
    BTU_bbp: i64,
    CO2_bbp: i64,
    BTU_cooling: i64,
    CO2_cooling: i64,
    BTU_LPG: i64,
    BTU_NG: i64,
    BTU_ELEC: i64,
    BTU_batch: i64,
    BTU_batch_per_green_kg: i64,
    BTU_roast: i64,
    BTU_roast_per_green_kg: i64,
    CO2_batch: i64,
    CO2_batch_per_green_kg: i64,
    CO2_roast: i64,
    CO2_roast_per_green_kg: i64,
    KWH_batch_per_green_kg: i64,
    KWH_roast_per_green_kg: i64
}

pub struct RawLog {
    version: String,
    revision: String,
    build: String,
    artisan_os: String,
    artisan_os_version: String,
    mode: String,
    viewerMode: bool,
    timeindex: Vec<i64>,
    flavors: Vec<f64>,
    flavorlabels: Vec<String>, 
    flavorstartangle: i64,
    flavoraspect: f64,
    title: String,
    locale: String,
    beans: String,
    weight: Vec<num_str>,
    volume: Vec<num_str>,
    density:  Vec<num_str>,
    density_roasted: Vec<num_str>, 
    roastertype: String,
    roastersize: i64,
    roasterheating: i64,
    machinesetup: String,
    operator: String,
    organization: String,
    drumspeed: String,
    heavyFC: bool,
    lowFC: bool,
    lightCut: bool,
    darkCut: bool,
    drops: bool, 
    oily: bool,
    uneven: bool,
    tipping: bool, 
    scorching: bool,
    divots: bool,
    whole_color: i64,
    ground_color: i64,
    color_system: String,
    volumeCalcWeightIn: String,
    volumeCalcWeightOut: String,
    roastdate: String,
    roastisodate: String,
    roasttime: String,
    roastUUID: String,
    beansize: String,
    beansize_min: String,
    beansize_max: String,
    specialevents: Vec<String>,
    specialeventstype: Vec<String>,
    specialeventsvalue: Vec<String>, 
    specialeventsStrings: Vec<String>,
    etypes: Vec<String>, 
    roastingnotes: String, 
    cuppingnotes: String,
    timex: Vec<f64>,
    temp1: Vec<f64>,
    phases: Vec<i64>,
    zmax: f64,
    zmin: f64,
    ymax: f64,
    ymin: f64,
    xmin: f64,
    xmax: f64,
    ambientTemp: f64,
    ambient_humidity: f64,
    ambient_pressure: f64,
    moisture_greens: f64,
    greens_temp: f64,
    moisture_roasted: f64,
    extradevices: Vec<f64>,
    extraname1: Vec<String>,
    extraname2: Vec<String>,
    extratimex: Vec<Vec<f64>>,
    extratemp2: Vec<Vec<f64>>,
    extramathexpression1: Vec<String>,
    extramathexpression2: Vec<String>,
    extradevicecolor1: Vec<String>,
    extradevicecolor2: Vec<String>,
    extraLCDvisibility1: Vec<bool>,
    extraLCDvisibility2: Vec<bool>,
    extraCurveVisibility1: Vec<bool>,
    extraCurveVisibility2: Vec<bool>,
    extraDelta2: Vec<bool>,
    extraFill1: Vec<f64>,
    extraFill2: Vec<f64>,
    extramarkersizes1: Vec<f64>,
    extramarkersizes2: Vec<f64>,
    extramarkers1: Option<Vec<String>>,
    extramarkers2: Option<Vec<String>>,
    extralinewidths1: Option<Vec<f64>>,
    extralinewidths2: Option<Vec<f64>>,
    extralinestyles1: Option<Vec<String>>,
    extralinestyles2: Option<Vec<String>>,
    extradrawstyles1: Option<Vec<String>>,
    extradrawstyles2: Option<Vec<String>>,
    externalprogram: String,
    externaloutprogram: String,
    extraNoneTempHint1: Option<Vec<bool>>, 
    extraNoneTempHint2: Opion<Vec<bool>>,
    alarmsetlabel: String,
    alarmflag: Option<Vec<String>>,
    alarmguard: Option<Vec<String>>,
    alarmnegguard: Option<Vec<String>>,
    alarmtime: Option<Vec<String>>,
    alarmoffset: Option<Vec<String>>,
    alarmcond: Option<Vec<String>>,
    alarmsource: Option<Vec<String>>,
    alarmtemperature: Option<Vec<String>>,
    alarmaction: Option<Vec<String>>,
    alarmbeep: Option<Vec<String>>,
    alarmstrings: Option<Vec<String>>,
    backgroundpath: String, 
    backgroundUUID: String,
    samplinginterval: f64,
    oversampling: bool,
    svLabel: String,
    svValues: Vec<i64>,
    svRamps: Vec<i64>,
    svSoaks: Vec<i64>,
    svActions: Vec<i64>,
    svBeeps: Vec<bool>,
    svDescriptions: Vec<String>,
    devices: Vec<String>,
    elevation: i64,
    computed: ComputedField,   
    anno_positions: Vec<Vec<f64>>, 
    flag_positions: Option<Vec<f64>>,
    loadlabels: Vec<String>,
    loadratings: Vec<f64>,
    ratingunits: Vec<f64>,
    sourcetypes: Vec<f64>
}

pub struct flavors {
    acidity: f64,
    aftertaste: f64,
    clean_cup: f64,
    head: f64,
    fragrance: f64, 
    sweetness: f64,
    aroma: f64,
    balance: f64,
    body: f64
}

pub struct defects {
    heavy_fc: bool,
    low_fc: bool,
    light_cut: bool,
    dark_cut: bool,
    drops: bool,
    oily: bool,
    uneven: bool,
    tipping: bool,
    scorching: bool,
    divots: bool 
}

pub struct roaster {
    roastertype: String
}

pub struct roast {
    roasterisodate: String,
    roasttime: String,
    roastepoch: i64,
    roasttzzoffset: i64,
    roastbatchnr: i64,
    roastbatchprefix: String,
    roastbatchpos: i64,
    roastUUID: String,

}

pub struct operator {
    operatorid: f64
}

pub struct {

}